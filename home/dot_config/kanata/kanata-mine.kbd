(defcfg
  process-unmapped-keys yes
  concurrent-tap-hold yes
  ;; sequence-input-mode visible-backspaced

  ;; linux-dev /dev/input/by-id/usb-Kinesis_Kinesis_Adv360_360555127546-if01-event-kbd
  ;; linux-dev /dev/input/event4

  rapid-event-delay 0
  chords-v2-min-idle-experimental 5
  log-layer-changes no
)

(defsrc
  q  w  e  r  t       y  u  i  o  p
   a  s  d  f  g       h  j  k  l  ;
    z  x  c  v  b       n  m  ,  .  /  
)

(defvar
  fake_keys_timeout  20 ;;
  chord_timeout      25 ;; ( 50-100)
  tap_timeout       200 ;; (150-250)
  hold_timeout      200 ;; (150-250)
  one_shot_timeout  500 ;; dismiss after that time
)

(defalias
  ;; GO TO LAYER
  to_nor       (layer-switch L_NORMAL)
  to_nav_lt    (layer-switch L_NAV_LT)
  to_nav_rt    (layer-switch L_NAV_RT)
  to_ins_nav   (layer-switch L_INS_NAV)
  to_no_mods   (layer-switch L_NO_MODS)
  to_ins       (layer-switch L_INS)


  ;; ONE SHOT LAYER
  ;;os_meh   (one-shot-press $one_shot_timeout C-A-S)
  ;;os_ns    (one-shot-press $one_shot_timeout (layer-while-held L_NUMBERS))
  ;;os_ff    (one-shot-press $one_shot_timeout (layer-while-held L_F_1_12))
  os_go    (one-shot-press $one_shot_timeout (layer-while-held L_SHORTCUTS))
  os_me    (one-shot-press $one_shot_timeout (layer-while-held L_MEDIA))

  tap (multi @to_no_mods (on-idle-fakekey fk_nomods tap $fake_keys_timeout))

  ;; QWERTY KEYBOARD LAYOUT
  _tlp q   _tlr w   _tlm e   _tli r         _tri u   _trm i   _trr o   _trp p
  _blp a   _blr s   _blm d   _bli f         _bri j   _brm k   _brr l   _brp ;

  ;; MODS ALPHA
  tlp      @_tlp
  tlr      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_tlr @tap) lalt $lt_kbd)
  tlm      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_tlm @tap) (layer-while-held L_NUMBERS) $lt_kbd)
  tli      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_tli @tap) lmet $lt_kbd)
  tri      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_tri @tap) lmet $rt_kbd)
  trm      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_trm @tap) (layer-while-held L_NUMBERS) $rt_kbd)
  trr      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_trr @tap) lalt $rt_kbd)
  trp      @_trp
  blp      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_blp @tap) (layer-while-held L_NAV_RT) $lt_kbd)
  blr      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_blr @tap) lctl $lt_kbd)
  blm      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_blm @tap) (layer-while-held L_F_1_12) $lt_kbd)
  bli      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_bli @tap) lsft $lt_kbd)
  bri      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_bri @tap) lsft $rt_kbd)
  brm      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_brm @tap) (layer-while-held L_F_1_12) $rt_kbd)
  brr      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_brr @tap) lctl $rt_kbd)
  brp      (tap-hold-release-keys $tap_timeout $hold_timeout (multi @_brp @tap) (layer-while-held L_NAV_LT) $rt_kbd)


  ;; CHORDS AL
  al_tli   (chord CH_BASE ch_tli)
  al_tlm   (chord CH_BASE ch_tlm)
  al_tlr   (chord CH_BASE ch_tlr)
  al_tlp   (chord CH_BASE ch_tlp)
  al_bli   (chord CH_BASE ch_bli)
  al_blm   (chord CH_BASE ch_blm)
  al_blr   (chord CH_BASE ch_blr)
  al_blp   (chord CH_BASE ch_blp)
  al_tri   (chord CH_BASE ch_tri)
  al_trm   (chord CH_BASE ch_trm)
  al_trr   (chord CH_BASE ch_trr)
  al_trp   (chord CH_BASE ch_trp)
  al_bri   (chord CH_BASE ch_bri)
  al_brm   (chord CH_BASE ch_brm)
  al_brr   (chord CH_BASE ch_brr)
  al_brp   (chord CH_BASE ch_brp)


  ;; CHORDS NS
  _n0   (chord CH_NS ch_n0)
  _n1   (chord CH_NS ch_n1)
  _n3   (chord CH_NS ch_n3)
  _n5   (chord CH_NS ch_n5)
  _n6   (chord CH_NS ch_n6)
  _n8   (chord CH_NS ch_n8)


  ;; CHORDS FF
  _f1   (chord CH_FF ch_f1)
  _f3   (chord CH_FF ch_f3)
  _f5   (chord CH_FF ch_f5)
  _f6   (chord CH_FF ch_f6)
  _f8   (chord CH_FF ch_f8)
  _f10  (chord CH_FF ch_f10)
  _f12  (chord CH_FF ch_f12)


  ;; CHORDS NA
  na_up     (chord CH_NA ch_up)
  na_dn     (chord CH_NA ch_dn)
  na_lt     (chord CH_NA ch_lt)
  na_rt     (chord CH_NA ch_rt)
  na_tab    (chord CH_NA ch_tab)
  na_bspc   (chord CH_NA ch_bspc)
  na_up_10  (chord CH_NA ch_bspc)
  na_dn_10  (chord CH_NA ch_bspc)
  na_pgup   (tap-hold $tap_timeout $hold_timeout pgup lmet)
  na_pgdn   (tap-hold $tap_timeout $hold_timeout pgdn lsft)


  ;; CHORDS NO
  no_g      (chord CH_NO ch_g)
  no_h      (chord CH_NO ch_h)


  ;; MACROS
  _C_z      (macro C-z)
  _C_x      (macro C-x)
  _C_c      (macro C-c)
  _C_v      (macro C-v)
  _C_pgup   (macro C-pgup)
  _C_pgdn   (macro C-pgdn)
  _C_tab    (macro C-tab)
  _C_A_q    (macro C-A-q)
  _C_w      (macro C-w)
  _A_9      (macro A-9)
  _C_z      (macro C-z)

  -- Nav layer
  na_up_10  (macro up up up up up up up up up up)
  na_dn_10  (macro down down down down down down down down down down)

  -- Edit Layer
  ed_up (macro )
  ed_dn (macro )
  ed_lt (macro )
  ed_rt (macro )
  bspc
  
  u @ed_tab    i @ed_up    o @ed_bspc    p @ed_up_10
  j @ed_lt     k @ed_dn    l @ed_rt      ; @ed_dn_10

  -- Insert layer
  in_home   (macro home @to_ins)
  in_end    (macro end @to_ins)
  in_up     (macro up end enter @to_ins)
  in_dn     (macro end enter @to_ins)
  in_left   (macro left @to_ins)
  in_right  (macro right @to_ins)
  in_bspc   (macro bspc @to_ins)
)

(defchords CH_BASE $chord_timeout
  |-- LEFT --|
  (ch_tlp) @tlp   (ch_tlr) @tlr   (ch_tlm) @tlm   (ch_tli) @tli
  (ch_blp) @blp   (ch_blr) @blr   (ch_blm) @blm   (ch_bli) @bli

  |-- RIGHT --|
  (ch_tri) @tri   (ch_trm) @trm   (ch_trr) @trr   (ch_trp) @trp
  (ch_bri) @bri   (ch_brm) @brm   (ch_brr) @brr   (ch_brp) @brp 

  ;;                  | | | | |     --     | | | | |
  ;;                  | |*|*|*|     --     |*|*|*| |
  (ch_blr ch_blm ch_bli) spc               (ch_bri ch_brm ch_brr) spc

  ;;                  | |*|*|*|     --     |*|*|*| |
  ;;                  | | | | |     --     | | | | |
  (ch_tlr ch_tlm ch_tli) esc               (ch_tri ch_trm ch_trr) esc

  ;;                  | | | | |     --     | | | | |
  ;;                  |*|*|*| |     --     | |*|*|*|
  (ch_blp ch_blr ch_blm) @os_go            (ch_brm ch_brr ch_brp) @os_go

  ;;                  |*|*|*| |     --     | |*|*|*|
  ;;                  | | | | |     --     | | | | |
  (ch_tlp ch_tlr ch_tlm) @os_me            (ch_trm ch_trr ch_trp) @os_me
)


(defchords CH_NS $chord_timeout
  ;; NUMBER CHORDS
  (ch_n6) 6   (ch_n8) 8   (ch_n0) 0
  (ch_n1) 1   (ch_n3) 3   (ch_n5) 5

  ;;                  | | | | |     --     | | | | |
  ;;                  | | |*|*|     --     |*|*| | |
  (ch_n1  ch_n3) 2

  ;;                  | | | | |     --     | | | | |
  ;;                  | |*|*| |     --     | |*|*| |
  (ch_n3  ch_n5) 4

  ;;                  | | |*|*|     --     |*|*| | |
  ;;                  | | | | |     --     | | | | |
  (ch_n6  ch_n8) 7

  ;;                  | |*|*| |     --     | |*|*| |
  ;;                  | | | | |     --     | | | | |
  (ch_n8  ch_n0) 9
)


(defchords CH_FF $chord_timeout
  ;; NUMBER CHORDS
  (ch_f6) f6   (ch_f8) f8    (ch_f10) f10    (ch_f12) f12
  (ch_f1) f1   (ch_f3) f3    ( ch_f5)  f5

  ;;                  | | | | |     --     | | | | |
  ;;                  | | |*|*|     --     |*|*| | |
  (ch_f1   ch_f3)  f2

  ;;                  | | | | |     --     | | | | |
  ;;                  | |*|*| |     --     | |*|*| |
  (ch_f3   ch_f5)  f4

  ;;                  | | |*|*|     --     |*|*| | |
  ;;                  | | | | |     --     | | | | |
  (ch_f6   ch_f8)  f7

  ;;                  | |*|*| |     --     | |*|*| |
  ;;                  | | | | |     --     | | | | |
  (ch_f8  ch_f10)  f9

  ;;                  |*|*| | |     --     | | |*|*|
  ;;                  | | | | |     --     | | | | |
  (ch_f10 ch_f12)  f11
)

(defchords CH_NA $chord_timeout
  ;; NAVIGATION CHORDS
  (ch_tab) tab   (ch_up) up     (ch_bspc) bspc
  (ch_lt) left   (ch_dn) down   (ch_rt) rght

  (ch_lt   ch_dn  ch_rt)        spc
  (ch_tab  ch_up  ch_bspc)      esc
  (ch_tab         ch_bspc)      home
  (ch_lt          ch_rt)        end
  (        ch_up  ch_bspc)      del
  (ch_tab  ch_up         )      pgup
  (        ch_dn  ch_bspc)      pgdn
)

(defchords CH_NO $chord_timeout
  ;; NAVIGATION CHORDS
  (ch_g) g (ch_h) h

  (ch_g   ch_h)        @to_nor
)

(deffakekeys
  fk_nomods @to_nor
)

(deflayermap (L_NORMAL)
  ;; LEFT
  q @to_nav_lt     w lalt    e tab    r lmet
  a @to_ins_nav    s lctl    d del    f lsft

  ;; RIGHT
  u @na_tab    i @na_up    o @na_bspc    p @na_up_10
  j @na_lt     k @na_dn    l @na_rt      ; @na_dn_10

  ___ XX
)

(deflayermap (L_EDIT)
  ;; LEFT
  q @to_nav_lt     w lalt    e tab    r lmet
  a @to_ins_nav    s lctl    d del    f lsft

  ;; RIGHT
  u @ed_w_lt    i @ed_up    o @ed_w_rt    p @ed_up_10
  j @ed_lt      k @ed_dn    l @ed_rt      ; @ed_dn_10

  ___ XX
)

(deflayer L_INS_NAV
  ;; RIGHT
  u @in_home    i @in_up     o @in_end      p @in_bspc
  j @in_left    k @in_dn     l @in_right    ; XX

  ___ XX
)

;; Colemak-dh
;; q w f p b     j l u y ;
;; a r s t g     m n e i o
;; z x c d v     k h , . /

(deflayermap (L_INS)
  ;; LEFT
  q @al_tlp    w @al_tlr     e @al_tlm     r @al_tli
  a @al_blp    s @al_blr     d @al_blm     f @al_bli

  ;; RIGHT
  u @al_tri    i @al_trm     o @al_trr     p @al_trp
  j @al_bri    k @al_brm     l @al_brr     ; @al_brp

  ___ XX
)

(deflayer L_NO_MODS
  q  w  e  r  t          y  u  i  o  p 
  a  s  d  f  @no_g  @no_h  j  k  l  ;
  z  x  c  v  b          n  m  ,  .  /
)

(deflayermap (L_NUMBERS)
  -- Left
  q XX    w @_n0    e @_n8    r @_n6
  a XX    s @_n5    d @_n3    f @_n1

  -- Right
  u @_n6    i @_n8    o @_n0    p XX
  j @_n1    k @_n3    l @_n5    ; XX

  ___ XX
)

(deflayermap (L_F_1_12)
  -- Left
  q @_f12   w @_f10   e @_f8     r @_f6
  a XX      s @_f5    d @_f3     f @_f1

  -- Right
  u @_f6    i @_f8    o @_f10    p @_f12
  j @_f1    k @_f3    l @_f5     ; XX

  ___ XX
)

(deflayermap (L_MEDIA)
  -- Left
  q XX    w prev   e volu      r mute
  a XX    s next   d voldwn    f pp

  -- Right
  u mute    i volu     o prev    p XX
  j pp      k voldwn   l next    ; XX

  ___ XX
)

(deflayermap (L_SHORTCUTS)
  -- Left
  q @_C_A_q    w @_A_9      e @_C_pgup    r XX
  a XX         s @_C_tab    d @_C_pgdn    f @_C_w

  -- Right
  u XX       i @_C_pgup    o @_A_9      p @_C_A_q
  j @_C_w    k @_C_pgdn    l @_C_tab    ; XX

  ___ XX
)

