(defcfg
  process-unmapped-keys yes
  macos-dev-names-include (
    "Apple Internal Keyboard / Trackpad"
    ;"Bluetooth USB Host Controller"
  )
  concurrent-tap-hold yes
)

(defsrc
  q  w  e  r      u  i  o  p
  a  s  d  f      j  k  l  ;
)

(defvar
  tap-timeout      100
  hold-timeout     150
  chord-timeout    50
  one-shot-timeout 500

  tt $tap-timeout
  ht $hold-timeout
  ct $chord-timeout
  ot $one-shot-timeout
)

;; UNICODE SYMBOLS
(defalias
 ;;
   colon  (unicode :)
   semic  (unicode ;)
   dot    (unicode .)
   comma  (unicode ,)
   qmark  (unicode ?)
 ;;
   emark  (unicode !)
   at     (unicode @)
   hash   (unicode #)
   dollr  (unicode $)
   percn  (unicode %)
   caret  (unicode ^)
   amper  (unicode &)
   aster  (unicode *)
 ;;
   plus   (unicode +)
   equal  (unicode =)
   dash   (unicode -)
   under  (unicode _)
 ;;
   lparn  (macro S-9)
   rparn  (macro S-0)
   lbrac  (unicode {)
   rbrac  (unicode })
   lbrak  (unicode [)
   rbrak  (unicode ])
   gt     (unicode >)
   lt     (unicode <)
 ;;
   grave  (unicode `)
   tilde  (unicode ~)
   fslsh  (unicode /)
   pipe   (unicode |)
   bslsh  (unicode \)
   quot   (unicode ')
   dquot  (macro S-')
 ;;
)

(defalias
;; ONE SHOT
  os_meh  (one-shot-press $ot C-S-lalt)
  os_syms (one-shot-press $ot (layer-while-held U_SYMS))
  os_nums (one-shot-press $ot (layer-while-held U_NUMS))

;; TOP ROW (LEFT-TO-RIGHT)
  ;; r -- no mod
  n (tap-hold $tt $ht n lmet)
  t (tap-hold $tt $ht t lalt)
  ;; s -- no mod
;; BOT ROW
  ;; o -- no mod
  a (tap-hold $tt $ht a lctl)
  i (tap-hold $tt $ht i lsft)
  e_l (tap-hold $tt $ht e (layer-while-held U_NAV_L))
  e_r (tap-hold $tt $ht e (layer-while-held U_NAV_R))

;; TOP -- ALPHA CHORDS
  _r   (chord CH_BASE _r)
  _n   (chord CH_BASE _n)
  _t   (chord CH_BASE _t)
  _s   (chord CH_BASE _s)
;; BOT -- ALPHA CHORDS
  _o   (chord CH_BASE _o)
  _a   (chord CH_BASE _a)
  _i   (chord CH_BASE _i)
  _e_l (chord CH_BASE _e_l)
  _e_r (chord CH_BASE _e_r)

;; TOP -- SYMS CHORDS
  _dquot (chord CH_SYMS _dquot)
  _colon (chord CH_SYMS _colon)
  _semic (chord CH_SYMS _semic)
  _emark (chord CH_SYMS _emark)
;; BOT -- SYMS CHORDS
  _quot  (chord CH_SYMS _quot)
  _dot   (chord CH_SYMS _dot)
  _comma (chord CH_SYMS _comma)
  _qmark (chord CH_SYMS _qmark)


;; BOT -- NUMS CHORDS
  _n4 (chord CH_NUMS _n4)
  _n3 (chord CH_NUMS _n3)
  _n2 (chord CH_NUMS _n2)

;; ACTIONS
  _und (macro M-z)
  _cut (macro M-x)
  _cpy (macro M-c)
  _pst (macro M-v)
  pgup (tap-hold $tt $ht pgup lalt)
  pgdn (tap-hold $tt $ht pgdn lctl)
  cpy (tap-hold $tt $ht @_cpy lsft)
  pst (tap-hold $tt $ht @_pst lmet)
)

;; ALPHA
(defchords CH_BASE $ct
;; META
  (_e_l _i _a               ) spc
  (_e_r _i _a               ) spc
  (_e_r _i             _n   ) tab
  (_e_l _i             _n   ) tab
  (_e_l             _t _n   ) @os_syms
  (_e_r             _t _n   ) @os_syms
  (     _i _a    _s         ) caps
  (     _i _a _o            ) ret
  (        _a    _s _t      ) @os_nums
  (              _s _t _n   ) @os_meh
  (              _s    _n _r) bspc
  (                 _t _n _r) esc
;; ALPHA BASE
  (_e_l                     ) @e_r
  (_e_r                     ) @e_l
  (     _i                  ) @i
  (        _a               ) @a
  (           _o            ) o
  (              _s         ) s
  (                 _t      ) @t
  (                    _n   ) @n
  (                       _r) r
;; ALPHA CHORDS
  (_e_l _i                  ) d
  (_e_r _i                  ) d
  (_e_l    _a               ) l
  (_e_r    _a               ) l
  (_e_l       _o            ) g
  (_e_r       _o            ) g
  (_e_l             _t      ) c
  (_e_r             _t      ) c
  (_e_l                _n   ) m
  (_e_r                _n   ) m
  (_e_l                   _r) w
  (_e_r                   _r) w
  (     _i _a               ) u
  (     _i             _n   ) k
  (        _a _o            ) b
  (        _a    _s         ) z
  (        _a       _t      ) h
  (           _o _s         ) j
  (           _o       _n   ) x
  (              _s _t      ) f
  (              _s    _n   ) y
  (              _s       _r) q
  (                 _t _n   ) p
  (                    _n _r) v
)

;; SYMS CHORDS
(defchords CH_SYMS $ct
  (_qmark                                              ) @qmark
  (       _comma                                       ) @comma
  (              _dot                                  ) @dot
  (                   _quot                            ) @quot
  (                         _emark                     ) @emark
  (                                _semic              ) @semic
  (                                       _colon       ) @colon
  (                                              _dquot) @dquot

  (_qmark _comma _dot                                  ) @hash
  (_qmark _comma                                       ) @lparn
  (_qmark _comma                          _colon       ) @caret
  (_qmark        _dot                                  ) @lbrac
  (_qmark             _quot                            ) @lt
  (_qmark                          _semic              ) @amper
  (_qmark                          _semic _colon       ) @percn
  (_qmark                                 _colon       ) @fslsh
  (_qmark                                        _dquot) @dash
  (       _comma _dot                                  ) @lbrak
  (       _comma _dot _quot                            ) @grave
  (       _comma                          _colon       ) @at
  (              _dot _quot                            ) @equal
  (              _dot       _emark                     ) @bslsh
  (              _dot              _semic              ) @pipe
  (                   _quot               _colon       ) @plus
  (                   _quot _emark                     ) @under
  (                         _emark _semic              ) @rparn
  (                         _emark _semic _colon       ) @dollr
  (                         _emark        _colon       ) @rbrac
  (                         _emark               _dquot) @gt
  (                                _semic _colon       ) @rbrak
  (                                _semic _colon _dquot) @tilde
  (                                       _colon _dquot) @aster
)

(defchords CH_NUMS $ct
  ;; NUMS CHORDS
  (_n4          ) 4
  (     _n3     ) 3
  (          _n2) 2
  (     _n3  _n2) 0
  (_n4  _n3     ) 1
)


(deflayer U_BASE
  @_r  @_n  @_t  @_s          @_s    @_t  @_n  @_r
  @_o  @_a  @_i  @_e_l        @_e_r  @_i  @_a  @_o
)

(deflayer U_SYMS
  @_dquot  @_colon  @_semic  @_emark        @_emark  @_semic  @_colon  @_dquot
  @_quot   @_dot    @_comma  @_qmark        @_qmark  @_comma  @_dot    @_quot
)

(deflayer U_NUMS
  9  8    7    6         6    7    8    9
  5  @_n4  @_n3  @_n2       @_n2  @_n3  @_n4  5
)

(deflayer U_NAV_R
  @_cut  @pst  @pgup  _      del   up    bspc  _
  @_und  @cpy  @pgdn  _      left  down  rght  _
)

(deflayer U_NAV_L
  _  bspc  up    del          _  @pgup  @pst  @_cut
  _  left  down  rght         _  @pgdn  @cpy  @_und
)
