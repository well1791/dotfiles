(defcfg
  process-unmapped-keys yes
  sequence-input-mode visible-backspaced
  concurrent-tap-hold yes
)

(defsrc
  q  w  e  r      u  i  o  p
   a  s  d  f      j  k  l  ;
)

(defvar
  ct   75 ;; chord time (50-100)
  tt  200 ;; tap time (150-250)
  ht  200 ;; hold time (150-250)
  ot  500 ;; one shot time
  ltk ( ;; [l]ef[t]-hand keyboard
    q w e r t
    a s d f g
  )
  rtk ( ;; righ[t]-hand keyboard
    y u i o p
    h j k l ;
  )
)

(defalias
  tap (multi
    (layer-switch U_NO)
    (on-idle-fakekey fk_u_no tap 20)
  )

  ;; ONE SHOT LAYER
  os_meh   (one-shot-press $ot C-S-lalt)
  os_ns    (one-shot-press $ot (layer-while-held U_NS))
  os_ff    (one-shot-press $ot (layer-while-held U_FF))
  os_go    (one-shot-press $ot (layer-while-held U_GO))
  os_me    (one-shot-press $ot (layer-while-held U_ME))

  ;; GO TO LAYER
  u_al     (layer-switch base)
  u_nl     (layer-switch U_NL)
  u_nr     (layer-switch U_NR)
  u_no     (layer-switch U_NO)
 
  ;; QWERTY - LEFT
  _w       (tap-hold-release-keys $tt $ht (multi w @tap) lmet $ltk)
  _e       (tap-hold-release-keys $tt $ht (multi e @tap) (layer-while-held U_NS) $ltk)
  _r       (tap-hold-release-keys $tt $ht (multi r @tap) lalt $ltk)
  _a       (tap-hold-release-keys $tt $ht (multi a @tap) (layer-while-held U_NR) $ltk)
  _s       (tap-hold-release-keys $tt $ht (multi s @tap) lctl $ltk)
  _f       (tap-hold-release-keys $tt $ht (multi f @tap) lsft $ltk)
  _d       (tap-hold-release-keys $tt $ht (multi d @tap) (layer-while-held U_FF) $ltk)
  ;; QWERTY - RIGHT
  _u       (tap-hold-release-keys $tt $ht (multi u @tap) lalt $rtk)
  _i       (tap-hold-release-keys $tt $ht (multi i @tap) (layer-while-held U_NS) $rtk)
  _o       (tap-hold-release-keys $tt $ht (multi o @tap) lmet $rtk)
  _j       (tap-hold-release-keys $tt $ht (multi j @tap) lsft $rtk)
  _k       (tap-hold-release-keys $tt $ht (multi k @tap) (layer-while-held U_FF) $rtk)
  _l       (tap-hold-release-keys $tt $ht (multi l @tap) lctl $rtk)
  _;       (tap-hold-release-keys $tt $ht (multi ; @tap) (layer-while-held U_NL) $rtk)

  ;; ALPHA                       |-- LEFT --|           |-- RIGHT --|
  ptl   q     rtl @_w     mtl @_e     itl @_r           itr @_u     mtr @_i     rtr @_o     ptr p
  pbl @_a     rbl @_s     mbl @_d     ibl @_f           ibr @_j     mbr @_k     rbr @_l     pbr @_;

  ;; CHORDS ALPHA
  al_itl   (chord CH_BASE ch_itl)
  al_mtl   (chord CH_BASE ch_mtl)
  al_rtl   (chord CH_BASE ch_rtl)
  al_ptl   (chord CH_BASE ch_ptl)
  al_ibl   (chord CH_BASE ch_ibl)
  al_mbl   (chord CH_BASE ch_mbl)
  al_rbl   (chord CH_BASE ch_rbl)
  al_pbl   (chord CH_BASE ch_pbl)
  al_itr   (chord CH_BASE ch_itr)
  al_mtr   (chord CH_BASE ch_mtr)
  al_rtr   (chord CH_BASE ch_rtr)
  al_ptr   (chord CH_BASE ch_ptr)
  al_ibr   (chord CH_BASE ch_ibr)
  al_mbr   (chord CH_BASE ch_mbr)
  al_rbr   (chord CH_BASE ch_rbr)
  al_pbr   (chord CH_BASE ch_pbr)

  ;; CHORDS NO MODS
  no_d     (chord CH_NA ch_up)

  ;; CHORDS NS
  _nq   (chord CH_NS _nq)
  _n0   (chord CH_NS _n0)
  _n1   (chord CH_NS _n1)
  _n3   (chord CH_NS _n3)
  _n5   (chord CH_NS _n5)
  _n6   (chord CH_NS _n6)
  _n8   (chord CH_NS _n8)

  ;; CHORDS FF
  _f1   (chord CH_FF _f1)
  _f3   (chord CH_FF _f3)
  _f5   (chord CH_FF _f5)
  _f6   (chord CH_FF _f6)
  _f8   (chord CH_FF _f8)
  _f10  (chord CH_FF _f10)
  _f12  (chord CH_FF _f12)

  ;; CHORDS NA
  na_up     (chord CH_NA ch_up)
  na_dn     (chord CH_NA ch_dn)
  na_lt     (chord CH_NA ch_lt)
  na_rt     (chord CH_NA ch_rt)
  na_tab    (chord CH_NA ch_tab)
  na_bspc   (chord CH_NA ch_bspc)
  na_pgup   (tap-hold $tt $ht pgup lalt)
  na_pgdn   (tap-hold $tt $ht pgdn lsft)

  ;; CHORDS NO
  no_s     (chord CH_NO ch_s)
  no_f     (chord CH_NO ch_f)
  no_j     (chord CH_NO ch_j)
  no_l     (chord CH_NO ch_l)

  _C_z      (macro C-z)
  _C_x      (macro C-x)
  _C_c      (macro C-c)
  _C_v      (macro C-v)
  _C_pgup   (macro C-pgup)
  _C_pgdn   (macro C-pgdn)
  _C_tab    (macro C-tab)
  _C_A_q    (macro C-A-q)
  _C_w      (macro C-w)
  _A_9      (macro A-9)
)

(deffakekeys
  fk_u_no (layer-switch base)
)

(defchords CH_BASE $ct
  ;; ALPHA                                         |-- LEFT --|      |-- RIGHT --|
  (ch_ptl) @ptl   (ch_rtl) @rtl   (ch_mtl) @mtl   (ch_itl) @itl      (ch_itr) @itr   (ch_mtr) @mtr   (ch_rtr) @rtr   (ch_ptr) @ptr
  (ch_pbl) @pbl   (ch_rbl) @rbl   (ch_mbl) @mbl   (ch_ibl) @ibl      (ch_ibr) @ibr   (ch_mbr) @mbr   (ch_rbr) @rbr   (ch_pbr) @pbr 

  ;;                  | | | | |     --     | | | | |
  ;;                  | |*|*|*|     --     |*|*|*| |
  (ch_rbl ch_mbl ch_ibl) spc               (ch_ibr ch_mbr ch_rbr) spc

  ;;                  | |*|*|*|     --     |*|*|*| |
  ;;                  | | | | |     --     | | | | |
  (ch_rtl ch_mtl ch_itl) @u_no             (ch_itr ch_mtr ch_rtr) @u_no

  ;;                  | | | | |     --     | | | | |
  ;;                  |*|*|*| |     --     | |*|*|*|
  (ch_pbl ch_rbl ch_mbl) @os_go            (ch_mbr ch_rbr ch_pbr) @os_go

  ;;                  |*|*|*| |     --     | |*|*|*|
  ;;                  | | | | |     --     | | | | |
  (ch_ptl ch_rtl ch_mtl) @os_me            (ch_mtr ch_rtr ch_ptr) @os_me
)

(defchords CH_NS $ct
  ;; NUMBER CHORDS
  (_n6) 6   (_n8) 8   (_n0) 0
  (_n1) 1   (_n3) 3   (_n5) 5   (_nq) '

  ;;                  | | | | |     --     | | | | |
  ;;                  | | |*|*|     --     |*|*| | |
  (_n1  _n3) 2

  ;;                  | | | | |     --     | | | | |
  ;;                  | |*|*| |     --     | |*|*| |
  (_n3  _n5) 4

  ;;                  | | |*|*|     --     |*|*| | |
  ;;                  | | | | |     --     | | | | |
  (_n6  _n8) 7

  ;;                  | |*|*| |     --     | |*|*| |
  ;;                  | | | | |     --     | | | | |
  (_n8  _n0) 9
)

(defchords CH_FF $ct
  ;; NUMBER CHORDS
  (_f6) f6   (_f8) f8    (_f10) f10    (_f12) f12
  (_f1) f1   (_f3) f3    ( _f5)  f5

  ;;                  | | | | |     --     | | | | |
  ;;                  | | |*|*|     --     |*|*| | |
  (_f1   _f3)  f2

  ;;                  | | | | |     --     | | | | |
  ;;                  | |*|*| |     --     | |*|*| |
  (_f3   _f5)  f4

  ;;                  | | |*|*|     --     |*|*| | |
  ;;                  | | | | |     --     | | | | |
  (_f6   _f8)  f7

  ;;                  | |*|*| |     --     | |*|*| |
  ;;                  | | | | |     --     | | | | |
  (_f8  _f10)  f9

  ;;                  |*|*| | |     --     | | |*|*|
  ;;                  | | | | |     --     | | | | |
  (_f10 _f12)  f11
)

(defchords CH_NA $ct
  ;; NAVIGATION CHORDS
  (ch_tab) tab   (ch_up) up     (ch_bspc) bspc
  (ch_lt) left   (ch_dn) down   (ch_rt) rght

  (ch_lt   ch_dn  ch_rt)        spc
  (ch_tab  ch_up  ch_bspc)      esc
  (ch_tab         ch_bspc)      home
  (ch_lt          ch_rt)        end
  (        ch_up  ch_bspc)      del
)

(defchords CH_NO $ct
  ;; NAVIGATION CHORDS
  (ch_s) s   (ch_f) f
  (ch_j) j   (ch_l) l

  (ch_s   ch_f)   @u_al
  (ch_j   ch_l)   @u_al
)

(deflayer base ;; Alpha keys
  @al_ptl  @al_rtl  @al_mtl  @al_itl        @al_itr  @al_mtr  @al_rtr  @al_ptr      
  @al_pbl  @al_rbl  @al_mbl  @al_ibl        @al_ibr  @al_mbr  @al_rbr  @al_pbr      
)

(deflayer U_NO ;; [No] mods
  q      w  e      r                                    u  i      o  p 
  a  @no_s  d  @no_f                                @no_j  k  @no_l  ;
)

(deflayer U_NS ;; [N]umbers and [S]ymbols
     _  @_n0  @_n8  @_n6                    @_n6  @_n8  @_n0     _
  @_nq  @_n5  @_n3  @_n1                    @_n1  @_n3  @_n5  @_nq
)

(deflayer U_FF ;; [F]unctional keys
  @_f12  @_f10  @_f8  @_f6                  @_f6  @_f8  @_f10  @_f12
      _   @_f5  @_f3  @_f1                  @_f1  @_f3   @_f5  _
)

(deflayer U_NR ;; [N]avigation [R]ight
  @u_nl  lmet  tab  @na_pgup                @na_tab   @na_up    @na_bspc  @u_al
  @u_al  lctl  esc  @na_pgdn                @na_lt    @na_dn    @na_rt    enter
)

(deflayer U_NL ;; [N]avigation [L]eft
  @u_al  @na_bspc  @na_up   @na_tab         @na_pgup  tab  lmet  @u_nr
  enter  @na_lt    @na_dn   @na_rt          @na_pgdn  esc  lctl  @u_al
)

(deflayer U_ME ;; [ME]dia
  _  prev  volu    mute                     mute  volu    prev  _
  _  next  voldwn  pp                       pp    voldwn  next  _
)

(deflayer U_GO ;; "[GO] to" shortcuts
  @_C_A_q  @_A_9    @_C_pgup  _                 _  @_C_pgup    @_A_9  @_C_A_q
        _  @_C_tab  @_C_pgdn  @_C_w         @_C_w  @_C_pgdn  @_C_tab        _
)


